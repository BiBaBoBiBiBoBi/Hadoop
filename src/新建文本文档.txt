#CentOS7 开放端口
http://blog.csdn.net/zp1996323/article/details/52336851

#REDIS集群
redis-trib.rb  create  --replicas  1  192.168.233.135:7000 192.168.233.135:7001  192.168.233.135:7002 192.168.233.136:7003  192.168.233.136:7004  192.168.233.136:7005




<repositories>
	<repository>	
		<id>alimaven</id>
		<name>aliyun maven</name>
		<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
	</repository>
</repositories>

hive udf开发超详细手把手教程
http://blog.csdn.net/bitcarmanlee/article/details/51249260


./kafka-console-consumer.sh --broker-list 192.168.233.137:9092,192.168.233.138:9092,192.168.233.139:9092 --topic my-replicated-topic


http://mvnrepository.com/


./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 1 --topic java

 
 ERROR Producer connection to 111.63.112.254:9092 unsuccessful (kafka.producer.SyncProducer



Kafka集群简单测试
https://my.oschina.net/Listening/blog/686191




Storm的spout中如何将tuple发给指定的Blot？
http://support.huawei.com/huaweiconnect/enterprise/zh/thread-156487-1-1.html



https://blog.csdn.net/a_lele123/article/details/44975085


#INSERT OVERWRITE TABLE ALLOG 如果要写入ALLOG表，可以把注释去掉  
SELECT t1.platform,t1.user_id,row_number(t1.user_id)seq,t2.click_url FROM_URL,t1.click_url TO_URL FROM  
(select *,row_number(user_id)seq from trlog)t1  
LEFT OUTER JOIN  
(select *,row_number(user_id)seq from trlog)t2   
on t1.user_id = t2.user_id and t1.seq = t2.seq + 1;  


beeline -u jdbc:hive2://192.168.233.134:10000/default -n root -p


深入HBase架构解析（一）
http://www.blogjava.net/DLevin/archive/2015/08/22/426877.html

----------------------------------------------------------------------------------------------------------
YARN总体是主从结构,在整个资源管理框架中,RM为主,NM为从.RM负责对各个NM上的资源进行统一管理和调度.当用户提交一个应用程序时,需要提供一个用以跟踪和管理这个程序的AppicationMaster,它负责向RM申请资源,并要求NM启动可以占用一定资源的任务.
----------------------------------------------------------------------------------------------------------
RM是一个全局的资源管理器,负责整个系统的资源管理和分配.它主要有两个组件构成:调度器和应用程序管理器
调度器:调度器根据容量,队列等限制条件,将系统中的资源分配给各个正在运行的应用程序;应用程序管理器,负责管理整个系统中所有应用的程序,包括应用程序提交,与调度器协商资源以及启动AM,监控AM运行状态并在失败时重新启动它等.
-----------------------------------------------------------------------------------------------------------
AM,用户提交的每个应用程序均包含一个AM,主要功能包括:
	RM调度器协商以获取资源
	将得到的任务进一步分配给内部的任务
	与NM通信以启动/停止任务
	监控所有任务运行状态,并在任务运行失败时重新为任务申请资源以重启任务
-----------------------------------------------------------------------------------------------------------
NM,是每个节点上的资源和任务管理器
    它会定时地向RM汇报本节点上资源使用情况和各个Container的运行状态
    它接收并处理来自AM的Container启动/停止等各种请求
-----------------------------------------------------------------------------------------------------------
Container,是YARN中的资源抽象,它封装了某个节点上的多维度资源,当AM向RM申请资源时,RM为AM返回的资源便是用Container表示的.YARN会为每个任务分配一个Container,且该任务只能使用该Container中描述的资源
-----------------------------------------------------------------------------------------------------------
	
	
	
	
	
	
